package com.lucas.demo.controllers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.model.Pedido;
import com.lucas.demo.service.ArquivoService;
import com.lucas.demo.service.PedidoServico;

@RestController
@RequestMapping("/pedido")
public class PedidoControler {

	@Autowired
	PedidoServico pedidoServ;

	@Autowired
	ArquivoService arquivoServ;

	RestTemplate restTemplate = new RestTemplate();

	@PostMapping("/notificationCode")
	public ResponseEntity<?> receiveNotification(@RequestParam("notificationCode") String notificacaoCode) {

		System.out.println("Received notificationCode: " + notificacaoCode);

		arquivoServ.escreverCodigo(notificacaoCode);

		String urlProcess = pedidoServ.urlProcess(notificacaoCode);

		try {
			// Realiza a requisicao GET
			ResponseEntity<String> response = restTemplate.getForEntity(urlProcess, String.class);
			return ResponseEntity.ok(response.getBody());
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao processar notificação.");
		}
	}

	@GetMapping("/processar-notificacao")
	public ResponseEntity<?> processarNotificacao(@RequestParam("notificacaoCode") String notificacaoCode) {

		String url = pedidoServ.urlGet(notificacaoCode);

		try {
			// Realiza a requisicao GET
			ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
			String xmlResponse = response.getBody();

			Pedido pedido = pedidoServ.xmlParaPedido(xmlResponse);

			arquivoServ.escreverPedido(pedido);

			String message = "Salvo";
			return ResponseEntity.ok(message);

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao consultar notificação.");
		}
	}

	@PostMapping("/notificacoes")
	public void testew(@RequestBody String json) {
		// Processar os itens
		processItems(json);
	}

	private void processItems(String json) {
		ObjectMapper objectMapper = new ObjectMapper();

		try {
			JsonNode rootNode = objectMapper.readTree(json);
			JsonNode itemsNode = rootNode.path("items");

			if (itemsNode.isArray()) {
				List<Pedido> pedidos = new ArrayList<>();

				for (JsonNode itemNode : itemsNode) {
					Pedido pedido = objectMapper.treeToValue(itemNode, Pedido.class);
					pedidos.add(pedido);
				}

				// Exibir os itens
				for (Pedido item : pedidos) {
					System.out.println("Item: " + item);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
