package com.lucas.demo.service;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.exceptions.ErroArquivoException;
import com.lucas.demo.model.Prefixo;

@Service
public class PrefixosService {

	ObjectMapper mapper = new ObjectMapper();
	List<String> prefixosCarregados = new ArrayList<>();

	String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Prefixos";
	String caminhoArq = diretorio + "\\prefixos_.json";

	public void adicionarPrefixo(String prefixo) {
		ObjectMapper objectMapper = new ObjectMapper();

		List<Map<String, String>> prefixos = new ArrayList<>();

		File file = new File(caminhoArq);
		File pasta = new File(diretorio);

		if (!pasta.exists()) {
			if (pasta.mkdirs()) {
				System.out.println("Diretório criado com sucesso: " + diretorio);
			} else {
				throw new ErroArquivoException("Não foi possível criar o diretório: " + diretorio);
			}
		}
		// Carrega os prefixos existentes do arquivo
		if (file.exists()) {
			try {
				prefixos = objectMapper.readValue(file, new TypeReference<List<Map<String, String>>>() {
				});
			} catch (IOException e) {
				throw new ErroArquivoException("Não foi possível ler o arquivo.", e.getCause());
			}
		}

		// Adiciona o novo prefixo como um valor simples, sem JSON aninhado
		Map<String, String> novoPrefixo = new HashMap<>();
		novoPrefixo.put("prefixo", prefixo.trim()); // Apenas o valor simples do prefixo
		prefixos.add(novoPrefixo);

		// Escreve de volta no arquivo
		try {
			objectMapper.writerWithDefaultPrettyPrinter().writeValue(file, prefixos);
		} catch (IOException e) {
			throw new ErroArquivoException("Não foi possível salvar o prefixo no arquivo.", e.getCause());
		}
	}

	public void excluirPrefixo(String prefixo) {
		List<String> prefixosCarregados = getPrefixos();

		boolean encontrado = false;

		Iterator<String> iterator = prefixosCarregados.iterator();

		while (iterator.hasNext()) {
			String prefixoTemp = iterator.next();
			if (prefixoTemp.equals(prefixo)) {
				iterator.remove();
				encontrado = true;
				break;
			}
		}

		if (!encontrado) {
			throw new ErroArquivoException("Prefixo não encontrado.");
		} else {
			salvarPrefixosNoArquivo(prefixosCarregados);
			System.out.println("Prefixo removido com sucesso.");
		}
	}

	private void salvarPrefixosNoArquivo(List<String> prefixosAtualizados) {
		File file = new File(caminhoArq);
		try {
			mapper.writeValue(file, new TypeReference<List<String>>() {
			});
		} catch (IOException e) {
			throw new ErroArquivoException("Não foi possível salvar os prefixos no arquivo.", e);
		}
	}

	// Método para carregar prefixos do arquivo JSON
	public void carregarPrefixos() {
		prefixosCarregados.clear();
		System.out.println("Iniciando carregamento de prefixos...");

		File arquivo = new File(caminhoArq);

		if (arquivo.exists()) {
			try {
				List<Prefixo> prefixosList = mapper.readValue(arquivo, new TypeReference<List<Prefixo>>() {});
	            // Extrair os prefixos como uma lista de strings
	            for (Prefixo p : prefixosList) {
	                prefixosCarregados.add(p.getPrefixo());
	            }
	            System.out.println("Prefixos carregados: " + prefixosCarregados);
			} catch (IOException e) {
				System.err.println("Erro ao ler o arquivo de prefixos: " + e.getMessage());
				throw new ErroArquivoException("Falha ao carregar prefixos do arquivo.", e);
			}
		} else {
			System.err.println("Arquivo de prefixos não encontrado: " + caminhoArq);
			throw new ErroArquivoException("Arquivo de prefixos não encontrado.");
		}
	}

	// Método para obter os prefixos
	public List<String> getPrefixos() {
		return prefixosCarregados;
	}
}