package com.lucas.demo.service;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.exceptions.ErroArquivoException;
import com.lucas.demo.model.ItemXml;

@Service
public class ArquivoService {

	@Lazy
	@Autowired
	PedidoServico pedidoServ;

	ObjectMapper mapper = new ObjectMapper();

	public void escreverCodigo(String notificationCode) {

		// ObjectMapper mapper = new ObjectMapper();

		List<Map<String, String>> codigosList = new ArrayList<>();

		// Obtenha a data atual e a hora atual
		LocalDate hoje = LocalDate.now();
		LocalTime agora = LocalTime.now();
		LocalDate data;

		// Se a hora atual for antes das 7h, usar o dia anterior
		if (agora.isBefore(LocalTime.of(7, 0))) {
			data = hoje.minusDays(1); // Usa a data anterior
		} else {
			data = hoje; // Usa a data atual
		}

		// Especifica o caminho onde o arquivo será salvo
		String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Registros\\Codigos-de-notificacao";

		String caminhoArq = diretorio + "//registros//codigos-de-notificacao" + "\\notificacaoCode_" + data + ".json";

		// Cria o diretório se ele não existir
		File directory = new File(diretorio);
		if (!directory.exists()) {
			directory.mkdirs(); // Cria o diretório
		}

		// Verifica se o arquivo já existe e, se existir, carrega a lista de códigos
		// existente
		File file = new File(caminhoArq);
		if (file.exists()) {
			try {
				codigosList = mapper.readValue(file, new TypeReference<List<Map<String, String>>>() {
				});
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		// Adiciona o novo código à lista
		Map<String, String> code = new HashMap<>();
		code.put("notificationCode", notificationCode);
		codigosList.add(code);

		escrever(codigosList, caminhoArq);
	}

	public synchronized boolean escreverPedido(ItemXml item) {
		
		boolean sucesso = true;
		List<Map<String, String>> pedidoList = new ArrayList<>();

		LocalDate data = LocalDate.now();

		/*String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Registros\\Pedidos";
		String caminhoArq = diretorio + "\\pedidos_" + data + ".json";

		System.out.println(caminhoArq);*/
		
		// Obtenha o diretório atual onde o programa está sendo executado
		String diretorioAtual = System.getProperty("user.dir");

		// Volte um nível removendo o último "demo" do caminho
		File diretorioPrincipal = new File(diretorioAtual).getParentFile();

		String caminhoArq = diretorioPrincipal + "\\registros\\pedidos\\pedidos_" + data + ".json";

		File file = new File(caminhoArq);

		// Verifica se o arquivo já existe e lê seu conteúdo
		if (file.exists()) {
			try {
				pedidoList = mapper.readValue(file, new TypeReference<List<Map<String, String>>>() {
				});
			} catch (IOException e) {
				sucesso = false;
				throw new ErroArquivoException("Não foi possivel ler o arquivo.", e.getCause());
			}
		}

		String horaAtual = LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));

		Map<String, String> novoPedido = new HashMap<>();

		// Adicionar o novo pedido à lista Map<String, String>
		novoPedido = new HashMap<>();
		novoPedido.put("quantity", String.valueOf(item.getQuantity()));
		novoPedido.put("reference_id", String.valueOf(item.getReferenceId()));
		novoPedido.put("description", item.getName());
		novoPedido.put("status", "andamento");
		novoPedido.put("hora", horaAtual);

		pedidoList.add(novoPedido);

		// Escreve no arquivo após adicionar todos os pedidos
		escrever(pedidoList, caminhoArq);

		// Adiciona o item à memória e realiza a lógica adicional
		//pedidoServ.adicionarItem(item);

	}

	/*
	 * public synchronized void alterarStatus(String senha, String novoStatus) {
	 * ObjectMapper objectMapper = new ObjectMapper();
	 * 
	 * try { // Local onde o arquivo está armazenado LocalDate data =
	 * LocalDate.now(); String diretorio =
	 * "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Registros\\Pedidos"; String
	 * caminhoArq = diretorio + "\\pedidos_" + data + ".json";
	 * 
	 * // Carrega o arquivo de pedidos para a lista File file = new
	 * File(caminhoArq); List<Map<String, Object>> pedidos;
	 * 
	 * if (file.exists()) { // Lê o arquivo JSON e converte para lista de pedidos
	 * pedidos = objectMapper.readValue(file, new TypeReference<List<Map<String,
	 * Object>>>() { }); } else {
	 * System.out.println("Arquivo de pedidos não encontrado."); return; // Sai da
	 * função caso o arquivo não exista }
	 * 
	 * // Variável de controle para saber se o pedido foi encontrado boolean
	 * pedidoEncontrado = false; System.out.println(senha); // Percorre os pedidos e
	 * altera o status do pedido com a senha especificada for (Map<String, Object>
	 * pedidoNovo : pedidos) { if (pedidoNovo.containsKey("reference_id")) { Object
	 * referenceId = pedidoNovo.get("reference_id"); String referenceIdStr =
	 * String.valueOf(referenceId);
	 * 
	 * System.out.println("Comparando reference_id: " + referenceIdStr +
	 * " com senha: " + senha);
	 * 
	 * if (referenceIdStr.equals(senha)) { pedidoNovo.put("status", novoStatus); //
	 * Atualiza o status pedidoNovo.put("hora", LocalTime.now()); pedidoEncontrado =
	 * true; break; } } } if (!pedidoEncontrado) {
	 * System.out.println("Pedido com a senha especificada não encontrado."); } else
	 * { // Escreve a lista de pedidos de volta no arquivo JSON
	 * objectMapper.writeValue(file, pedidos);
	 * System.out.println("Status atualizado com sucesso!");
	 * //pedidoServ.limparLista(); // Atualizar pedidos após alteração de status
	 * pedidoServ.carregarPedidos(); // Recarregar pedidos para refletir as
	 * alterações }
	 * 
	 * 
	 * } catch (IOException e) { e.printStackTrace(); } }
	 */

	public synchronized void alterarStatus(String senha, String novoStatus, String hora) {
		ObjectMapper objectMapper = new ObjectMapper();

		try {
			// Local onde o arquivo está armazenado
			LocalDate data = LocalDate.now();
			String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Registros\\Pedidos";
			String caminhoArq = diretorio + "\\pedidos_" + data + ".json";

			// Carrega o arquivo de pedidos para a lista
			File file = new File(caminhoArq);
			List<Map<String, Object>> pedidos;

			if (file.exists()) {
				// Lê o arquivo JSON e converte para lista de pedidos
				pedidos = objectMapper.readValue(file, new TypeReference<List<Map<String, Object>>>() {
				});
			} else {
				System.out.println("Arquivo de pedidos não encontrado.");
				return; // Sai da função caso o arquivo não exista
			}

			// Variável de controle para saber se o pedido foi encontrado
			boolean pedidoEncontrado = false;

			// Percorre os pedidos e altera o status do pedido com a senha e hora
			// especificadas
			for (Map<String, Object> pedidoNovo : pedidos) {
				if (pedidoNovo.containsKey("reference_id") && pedidoNovo.containsKey("hora")) {
					Object referenceId = pedidoNovo.get("reference_id");
					String referenceIdStr = String.valueOf(referenceId);
					String horaPedido = String.valueOf(pedidoNovo.get("hora"));

					if (referenceIdStr.equals(senha) && horaPedido.equals(hora)) {
						// Atualiza o status
						pedidoNovo.put("status", novoStatus);

						// Adiciona o horário apenas se o status for "cancelado" ou "entregue"
						if ("cancelar".equalsIgnoreCase(novoStatus) || "entregue".equalsIgnoreCase(novoStatus)) {
							// Formata a hora no formato desejado (exemplo: HH:mm:ss)
							String horaAtual = LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));

							pedidoNovo.put("hora", horaAtual); // Adiciona a hora formatada
						}

						pedidoEncontrado = true;
						break;
					}
				}
			}

			if (!pedidoEncontrado) {
				System.out.println("Pedido com a senha e hora especificados não encontrado.");
			} else {
				// Escreve a lista de pedidos de volta no arquivo JSON
				objectMapper.writeValue(file, pedidos);
				System.out.println("Status atualizado com sucesso!");

				// Atualizar pedidos após alteração de status
				pedidoServ.carregarPedidos(); // Recarregar pedidos para refletir as alterações
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private synchronized void escrever(List<?> registro, String caminhoArq) {
		// Salva a lista atualizada de volta ao arquivo
		try (PrintWriter escrever = new PrintWriter(new FileWriter(caminhoArq))) {
			// Converte a lista para JSON e escreve no arquivo
			String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(registro);
			// System.out.println("Escrevendo no arquivo: " + json); // Log para verificar o
			// conteúdo a ser escrito
			escrever.println(json); // Grava a lista inteira no arquivo
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}