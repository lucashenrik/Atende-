package com.lucas.demo.controllers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import com.lucas.demo.model.Item;
import com.lucas.demo.service.ArquivoService;
import com.lucas.demo.service.PedidoServico;

@RestController
@RequestMapping("/pedido")
@CrossOrigin(origins = "http://localhost:3000")
//@CrossOrigin(origins = "http://192.168.1.5:3000")
public class PedidoControler {

	@Autowired
	PedidoServico pedidoServ;

	@Autowired
	ArquivoService arquivoServ;

	private final List<SseEmitter> emitters = new ArrayList<>();
	
	RestTemplate restTemplate = new RestTemplate();

	@PostMapping("/notificationCode")
	public ResponseEntity<?> receiveNotification(@RequestParam("notificationCode") String notificacaoCode) {

		System.out.println("Received notificationCode: " + notificacaoCode);

		arquivoServ.escreverCodigo(notificacaoCode);

		String urlProcess = pedidoServ.urlProcess(notificacaoCode);

		try {
			// Realiza a requisicao GET
			ResponseEntity<String> response = restTemplate.getForEntity(urlProcess, String.class);
			return ResponseEntity.ok(response.getBody());
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao processar notificação.");
		}
	}

	@GetMapping("/processar-notificacao")
	public ResponseEntity<?> buscarPedido(@RequestParam("notificacaoCode") String notificacaoCode) {

		String url = pedidoServ.urlGet(notificacaoCode);

		try {
			// Realiza a requisicao GET
			ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
			String xmlResponse = response.getBody();

			Item item = pedidoServ.xmlParaPedido(xmlResponse);

			arquivoServ.escreverPedido(item);

			String message = "Salvo";
			return ResponseEntity.ok(message);

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao consultar notificação.");
		}
	}
	
	// Endpoint SSE que mantém a conexão aberta e envia eventos em tempo real
		@GetMapping("/stream")
		public SseEmitter streamPedidos() {
			SseEmitter emitter = new SseEmitter(1800000L); // 30 minutos               //Long.MAX_VALUE); //Cria um emissor SSE
			emitters.add(emitter); // Armazena o emissor na lista para usar quando novos pedidos chegarem
			
			emitter.onCompletion(() -> emitters.remove(emitter)); // Remove o emissor quando a conexão for encerrada
			emitter.onTimeout(() -> emitters.remove(emitter));	// Remove o emissor quando expirar
			
			return emitter;
		}

		@PostMapping("/notificacoes")
		public ResponseEntity<?> processarNotificacoes(@RequestBody String json) {
			pedidoServ.processarItens(json);
			
			List<Map<String, String>> novosPedidos = pedidoServ.getPedidoList();
			
			for (SseEmitter emitter : emitters) {
				try {
					emitter.send(SseEmitter.event().name("novo-pedido").data(novosPedidos));
				} catch(IOException e) {
					emitters.remove(emitter); // Remove emissores que falharem
				}
			}
			
			return new ResponseEntity<>("Sucesso!!", HttpStatus.CREATED);
		}
		
		/*@PostMapping("/notificacoes")
		public ResponseEntity<?> processarNotificacoes(@RequestBody String json) {
		    pedidoServ.processarItens(json);

		    List<Map<String, String>> novosPedidos = pedidoServ.getPedidoList();

		    Iterator<SseEmitter> iterator = emitters.iterator();
		    while (iterator.hasNext()) {
		        SseEmitter emitter = iterator.next();
		        try {
		            emitter.send(SseEmitter.event().name("novo-pedido").data(novosPedidos));
		        } catch (IOException e) {
		            iterator.remove(); // Remove o emissor com segurança
		        }
		    }

		    return new ResponseEntity<>("Sucesso!!", HttpStatus.CREATED);
		}*/

		@GetMapping("/lista-pedidos")
		public ResponseEntity<?> getLista(){
			pedidoServ.carregarPedidos();
			List<Map<String, String>> pedidos = pedidoServ.getPedidoList();
	        //pedidos.forEach(System.out::println);
			
			return ResponseEntity.ok(pedidos);
		}
}
