package com.lucas.demo.infra;

import java.io.IOException;
import java.security.Key;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;

import io.jsonwebtoken.security.Keys;

public class JwtFilter implements Filter {

	private static final String AUTH_HEADER = "Authorization";
	private static final String BEARER_PREFIX = "Bearer ";
	private static final String SECRET_KEY = "your-secret-key-here"; // Use a secure key management approach

	private Key key;

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		key = Keys.hmacShaKeyFor(SECRET_KEY.getBytes()); // Gera uma chave segura a partir da chave secreta
	}

	 @Override
	    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
	            throws IOException, ServletException {
	        HttpServletRequest httpRequest = (HttpServletRequest) request;
	        String authHeader = httpRequest.getHeader("Authorization");

	        // L칩gica para validar o JWT e definir o Authentication no SecurityContext
	        if (authHeader != null && authHeader.startsWith("Bearer ")) {
	            // L칩gica para extrair e validar o token JWT
	            // Exemplo simplificado
	            String token = authHeader.substring(7); // Remove "Bearer "
	            Authentication auth = // L칩gica para criar um Authentication a partir do token
	            SecurityContextHolder.getContext().setAuthentication(auth);
	        }

	        chain.doFilter(request, response);
	    }

	@Override
	public void destroy() {
		// Limpeza, se necess치rio
	}
}
