package infra;

import java.io.IOException;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.model.UserData;
import java.io.File;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(authz -> authz
                .requestMatchers("/auth/login/**").permitAll()
                .requestMatchers("/public/**").permitAll()
                .requestMatchers("/pedido/lista-pedidos").authenticated()
                .anyRequest().authenticated()
            )
            .formLogin(form -> form
                .loginPage("/auth/login")
                .permitAll()
            )
            .logout(logout -> logout
                .permitAll()
            );

        return http.build();
    }
    @Bean
    public UserDetailsService userDetailsService() {
        return username -> {
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                UserData userData = objectMapper.readValue(new File("C:\\Users\\Lucas\\Documents\\Projetos\\demo\\user.json"), UserData.class);
                return userData.getUsers().stream()
                    .filter(user -> user.getUsername().equals(username))
                    .findFirst()
                    .map(user -> User.withUsername(user.getUsername())
                                      .password(user.getPassword())
                                      .roles("USER") // Ou outra role, se aplicável
                                      .build())
                    .orElseThrow(() -> new UsernameNotFoundException("Usuário não encontrado: " + username));
            } catch (IOException e) {
                throw new RuntimeException("Falha ao carregar usuários", e);
            }
        };
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}