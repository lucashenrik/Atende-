package com.lucas.demo.service;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.model.Pedido;

@Service
public class ArquivoService {

	ObjectMapper mapper = new ObjectMapper();

	public void escreverCodigo(String notificationCode) {

		ObjectMapper mapper = new ObjectMapper();

		List<Map<String, String>> codigosList = new ArrayList<>(); // Inicializa a lista vazia

		LocalDate data = LocalDate.now();

		// Especifica o caminho onde o arquivo será salvo
		String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Registros\\Codigos-de-notificacao";
		String caminhoArq = diretorio + "\\notificacaoCode_" + data + ".json";

		// Cria o diretório se ele não existir
		File directory = new File(diretorio);
		if (!directory.exists()) {
			directory.mkdirs(); // Cria o diretório
		}

		// Verifica se o arquivo já existe e, se existir, carrega a lista de códigos
		// existente
		File file = new File(caminhoArq);
		if (file.exists()) {
			try {
				// Corrigido: usando TypeReference para garantir que seja lido como
				// List<Map<String, String>>
				codigosList = mapper.readValue(file, new TypeReference<List<Map<String, String>>>() {
				});
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		// Adiciona o novo código à lista
		Map<String, String> code = new HashMap<>();
		code.put("notificationCode", notificationCode);
		codigosList.add(code);

		// Salva a lista atualizada de volta ao arquivo
		try (PrintWriter escrever = new PrintWriter(new FileWriter(caminhoArq))) {
			// Escreve a lista no arquivo como JSON
			String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(codigosList);
			escrever.println(json); // Grava a lista inteira no arquivo
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void escreverPedido(Pedido item) {

		List<Map<String, String>> pedidoList = new ArrayList<>();

		LocalDate data = LocalDate.now();

		// Especifica o caminho onde o arquivo será salvo
		String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Registros\\Pedidos";
		String caminhoArq = diretorio + "\\pedidos_" + data + ".json";

		File directory = new File(diretorio);
		if (!directory.exists()) {
			directory.mkdirs(); // Cria o diretório
		}

		File novoArquiv = new File(diretorio);
		if (novoArquiv.exists()) {
			try {
				// Corrigido: usando TypeReference para garantir que seja lido como
				// List<Map<String, String>>
				pedidoList = mapper.readValue(novoArquiv, new TypeReference<List<Map<String, String>>>() {
				});
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

		String id = item.getReferenceId();
		int quantity = item.getQuantity();
		String description = item.getName();

		Map<String, String> novoItem = new HashMap<>();
		novoItem.put("reference_id", id);
		novoItem.put("quantity", String.valueOf(quantity));
		novoItem.put("description", description);
		pedidoList.add(novoItem);

		escrever(pedidoList, caminhoArq);
	}

	private void escrever(List<?> registro, String caminhoArq) {
		// Salva a lista atualizada de volta ao arquivo
		try (PrintWriter escrever = new PrintWriter(new FileWriter(caminhoArq))) {
			// Escreve a lista no arquivo como JSON
			String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(registro);
			escrever.println(json); // Grava a lista inteira no arquivo
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
