package com.lucas.demo.config;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import java.io.IOException;

@Configuration
public class SameSiteCookieFilterConfig {

    @Bean
    public FilterRegistrationBean<SameSiteCookieFilter> sameSiteCookieFilter() {
        FilterRegistrationBean<SameSiteCookieFilter> registrationBean = new FilterRegistrationBean<>();
        registrationBean.setFilter(new SameSiteCookieFilter());
        registrationBean.addUrlPatterns("/*"); // Adicione padrões de URL conforme necessário
        return registrationBean;
    }

    public static class SameSiteCookieFilter implements Filter {

        @Override
        public void init(FilterConfig filterConfig) throws ServletException {
            // Inicialização do filtro, se necessário
        }

        @Override
        public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, FilterChain chain)
                throws IOException, ServletException {

            HttpServletResponse httpResponse = (HttpServletResponse) response;

            // Prossiga com a requisição normalmente
            chain.doFilter(request, response);

            // Modifique os cookies na resposta após a requisição ser processada
            if (httpResponse.getCookies() != null) {
                for (Cookie cookie : httpResponse.getCookies()) {
                    String cookieHeader = String.format("%s=%s; HttpOnly; SameSite=None; Path=/", cookie.getName(), cookie.getValue());
                    httpResponse.addHeader("Set-Cookie", cookieHeader);
                }
            }
        }

        @Override
        public void destroy() {
            // Cleanup do filtro, se necessário
        }
    }
}
