package com.lucas.demo.service;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

@Service
public class UserConfigService {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final Path userFilePath = Paths.get("path/to/user.json");

    // Método para obter o email e o token
    public Map<String, String> getEmailAndToken() {
        try {
            JsonNode root = objectMapper.readTree(Files.newInputStream(userFilePath));
            JsonNode userNode = root.get("users").get(0); // Pega o primeiro e único usuário

            String email = userNode.get("email").asText();
            String token = userNode.get("token").asText();

            Map<String, String> result = new HashMap<>();
            result.put("email", email);
            result.put("token", token);

            return result;
        } catch (IOException e) {
            throw new RuntimeException("Erro ao ler o arquivo user.json", e);
        }
    }

    // Método para atualizar o email e o token
    public void updateEmailAndToken(String email, String token) {
        try {
            JsonNode root = objectMapper.readTree(Files.newInputStream(userFilePath));
            ObjectNode userNode = (ObjectNode) root.get("users").get(0); // Pega o primeiro e único usuário

            userNode.put("email", email);
            userNode.put("token", token);

            // Escreve as alterações de volta ao arquivo
            objectMapper.writeValue(Files.newOutputStream(userFilePath), root);
        } catch (IOException e) {
            throw new RuntimeException("Erro ao atualizar o arquivo user.json", e);
        }
    }
}
