package com.lucas.demo.service;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.exceptions.ErroArquivoException;
import com.lucas.demo.model.Prefixo;

@Service
public class PrefixosService {

	private ObjectMapper objectMapper = new ObjectMapper();
	private final List<String> prefixosCarregados = new ArrayList<>();
	private final String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Prefixos";
	private final String caminhoArq = diretorio + "\\prefixos_.json";

	public PrefixosService(ObjectMapper objectMapper) {
		this.objectMapper = objectMapper;
	}

	public void adicionarPrefixo(String prefixo) {
		List<Prefixo> prefixos = new ArrayList<>();

		validarDiretorio();

		File file = new File(caminhoArq);
		
		validarArquivo();
		
		// Carrega os prefixos existentes do arquivo
		if (file.exists()) {
			try {
				prefixos = objectMapper.readValue(file, new TypeReference<List<Prefixo>>() {
				});
			} catch (IOException e) {
				throw new ErroArquivoException("Não foi possível ler o arquivo.", e.getCause());
			}
		}

		// Adiciona o novo prefixo como um objeto
		prefixos.add(new Prefixo(prefixo.trim()));

		// Escreve de volta no arquivo
		try {
			objectMapper.writerWithDefaultPrettyPrinter().writeValue(file, prefixos);
		} catch (IOException e) {
			throw new ErroArquivoException("Não foi possível salvar o prefixo no arquivo.", e.getCause());
		}
	}

	public List<Prefixo> carregarPrefixos() {
		prefixosCarregados.clear();
		System.out.println("Iniciando carregamento de prefixos...");

		File file = new File(caminhoArq);
		List<Prefixo> prefixosList = new ArrayList<>();

		if (file.exists()) {
			try {
				prefixosList = objectMapper.readValue(file, new TypeReference<List<Prefixo>>() {
				});
				// Extrair os prefixos como uma lista de strings
				for (Prefixo p : prefixosList) {
					prefixosCarregados.add(p.getPrefixo());
				}
				System.out.println("Prefixos carregados: " + prefixosCarregados);
			} catch (IOException e) {
				System.err.println("Erro ao ler o arquivo de prefixos: " + e.getMessage());
				throw new ErroArquivoException("Falha ao carregar prefixos do arquivo.", e);
			}
		} else {
			System.err.println("Arquivo de prefixos não encontrado: " + caminhoArq);
			throw new ErroArquivoException("Arquivo de prefixos não encontrado.");
		}

		return prefixosList; // Retorna a lista de prefixos
	}

	public void excluirPrefixo(String prefixo) {
		// Carregar prefixos do arquivo
		List<Prefixo> prefixosList = carregarPrefixos(); // Chama o método que agora retorna uma lista

		boolean encontrado = false;

		// Usar um Iterator para remover o prefixo
		Iterator<Prefixo> iterator = prefixosList.iterator();
		while (iterator.hasNext()) {
			Prefixo prefixoTemp = iterator.next();
			if (prefixoTemp.getPrefixo().equals(prefixo)) {
				iterator.remove();
				encontrado = true;
				break;
			}
		}

		if (!encontrado) {
			throw new ErroArquivoException("Prefixo não encontrado.");
		} else {
			// Salvar os prefixos atualizados no arquivo
			salvarPrefixosNoArquivo(prefixosList);
			System.out.println("Prefixo removido com sucesso.");
		}
	}

	public void salvarPrefixosNoArquivo(List<Prefixo> prefixos) {
		try {
			objectMapper.writeValue(new File(caminhoArq), prefixos);
			System.out.println("Prefixos salvos com sucesso no arquivo.");
		} catch (IOException e) {
			throw new ErroArquivoException("Não foi possível salvar os prefixos no arquivo.", e);
		}
	}
	
	private void validarArquivo() {
	    File file = new File(caminhoArq);
	    if (!file.exists()) {
	        try {
	            // Tenta criar o arquivo, se necessário
	            file.createNewFile(); // Usado para garantir que o arquivo existe
	        } catch (IOException e) {
	            throw new ErroArquivoException("Não foi possível criar o arquivo: " + caminhoArq, e);
	        }
	    }
	}

	private void validarDiretorio() {
		File pasta = new File(diretorio);
		if (!pasta.exists() && !pasta.mkdirs()) {
			throw new ErroArquivoException("Não foi possível criar o diretório: " + diretorio);
		}
	}
}