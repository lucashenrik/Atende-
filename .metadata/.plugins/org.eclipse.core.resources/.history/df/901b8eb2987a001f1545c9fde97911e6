package com.lucas.demo.service;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.exceptions.ErroArquivoException;

@Service
public class PrefixosService {

	ObjectMapper mapper = new ObjectMapper();
	List<String> prefixosCarregados = new ArrayList<>();
	
	String diretorio = "C:\\Users\\Lucas\\Documents\\Projetos\\demo\\Prefixos";
	String caminhoArq = diretorio + "\\prefixos_.json";

	public void adicionarPrefixo(String prefixo) {
		ObjectMapper objectMapper = new ObjectMapper();

		List<String> prefixos = new ArrayList<>();

		
		File file = new File(caminhoArq);
		File pasta = new File(diretorio);
		
		if (!pasta.exists()) {
			if (pasta.mkdirs()) {
				System.out.println("Diretório criado com sucesso: " + diretorio);
			} else {
				throw new ErroArquivoException("Não foi possível criar o diretório: " + diretorio);
			}
		}
		if (file.exists()) {
			try {
				 // Carrega os prefixos existentes do arquivo
				prefixos = objectMapper.readValue(file, new TypeReference<List<String>>() {

				});
			} catch (IOException e) {
				 throw new ErroArquivoException("Não foi possível ler o arquivo.", e.getCause());
			}
		}
		
		prefixos.add(prefixo);
		
		// Grava a lista atualizada de volta no arquivo
		try {
			objectMapper.writeValue(file, prefixos);
			System.out.println("Prefixo adicionado com sucesso e salvo no arquivo.");
		}catch (IOException e ){
			throw new ErroArquivoException("Não foi possivel salvar o arquivo.", e.getCause());
		}
	}

	public void excluirPrefixo(String prefixo) {
		List<String> prefixosCarregados = getPrefixos();
		
		boolean encontrado = false;
		
		Iterator<String> iterator = prefixosCarregados.iterator();
		
		while (iterator.hasNext()) {
			String prefixoTemp = iterator.next();
			if(prefixoTemp.equals(prefixo)) {
				iterator.remove();
				encontrado = true;
				break;
			}
		}
		
		if (!encontrado) {
			throw new ErroArquivoException("Prefixo não encontrado.");
		} else {
			salvarPrefixosNoArquivo(prefixosCarregados);
			System.out.println("Prefixo removido com sucesso.");
		}
	}
	
	private void salvarPrefixosNoArquivo(List<String> prefixosAtualizados) {
		File file = new File(caminhoArq);
		try {
			mapper.writeValue(file,  new TypeReference<List<String>>() {
			});
		}catch (IOException e) {
			throw new ErroArquivoException("Não foi possível salvar os prefixos no arquivo.", e);
		}
	}
	
	public void carregarPrefixos() {
		//prefixosCarregados.clear();
		
		try {
			File arquivo = new File(caminhoArq);
			
			if (arquivo.exists()) {
				try {
					prefixosCarregados = mapper.readValue(arquivo, new TypeReference<List<String>>() {
					}); 
				} catch (IOException e) {
					throw new ErroArquivoException("Falha ao carregar pedidos do arquivo: ", e);
				}
			}
		}catch (ErroArquivoException e) {
			throw new ErroArquivoException("Arquivo não encontrado.");
		}
		System.out.println("Prefixos: " + prefixosCarregados);
	}
	
	public List<String> getPrefixos(){
		return prefixosCarregados;
	}
}