package com.lucas.demo.controllers;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.lucas.demo.model.Pedido;
import com.lucas.demo.model.Pedidos;
import com.lucas.demo.service.ArquivoService;
import com.lucas.demo.service.PedidoServico;

@RestController
@RequestMapping("/pedido")
public class PedidoControler {

	@Autowired
	PedidoServico pedidoServ;

	@Autowired
	ArquivoService arquivoServ;

	RestTemplate restTemplate = new RestTemplate();

	@PostMapping("/notificationCode")
	public ResponseEntity<?> receiveNotification(@RequestParam("notificationCode") String notificacaoCode) {

		System.out.println("Received notificationCode: " + notificacaoCode);

		arquivoServ.escreverCodigo(notificacaoCode);

		String urlProcess = pedidoServ.urlProcess(notificacaoCode);

		try {
			// Realiza a requisicao GET
			ResponseEntity<String> response = restTemplate.getForEntity(urlProcess, String.class);
			return ResponseEntity.ok(response.getBody());
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao processar notificação.");
		}
	}

	@GetMapping("/processar-notificacao")
	public ResponseEntity<?> processarNotificacao(@RequestParam("notificacaoCode") String notificacaoCode) {

		String url = pedidoServ.urlGet(notificacaoCode);

		try {
			// Realiza a requisicao GET
			ResponseEntity<String> response = restTemplate.getForEntity(url, String.class);
			String xmlResponse = response.getBody();

			Pedido pedido = pedidoServ.xmlParaPedido(xmlResponse);

			arquivoServ.escreverPedido(pedido);

			String message = "Salvo";
			return ResponseEntity.ok(message);

		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Erro ao consultar notificação.");
		}
	}

	@PostMapping("/teste2")
	public ResponseEntity<?> teste(@RequestBody String json) {

		try {

			// Cria um ObjectMapper para converter o JSON em objetos
			ObjectMapper mapper = new ObjectMapper();

			// Converte o JSON recebido para um objeto Pedidos
			Pedidos pedidos = mapper.readValue(json, Pedidos.class);

			System.out.println("Objetos recebidos" + pedidos);
			// Verifica a lista de pedidos
			if (pedidos.getPedidos() != null) {
				for (Pedido pedido : pedidos.getPedidos()) {
					String id = pedido.getReferenceId();
					int quantidade = pedido.getQuantity();
					String descricao = pedido.getName();

					// Exibe as informações no console ou faz o processamento necessário
					System.out.println("Item Reference ID: " + id);
					System.out.println("Item Name: " + descricao);
					System.out.println("Item Quantity: " + quantidade);
				}
			} else {
				System.out.println("A lista de pedidos está vazia.");
			}

			return ResponseEntity.ok("Notificação processada com sucesso");
		} catch (Exception e) {
			// Tratar exceções e retornar uma resposta adequada
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Erro ao processar o JSON");
		}
	}

	@PostMapping("/teste3")
    public void testew(@RequestBody String json) {
        System.out.println("Método teste chamado");
        System.out.println("JSON completo recebido: " + json);

        // Processar os itens
        processItems(json);
    }

    private void processItems(String json) {
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            // Deserializa o JSON para a classe Pedidos
            Pedidos pedidos = objectMapper.readValue(json, Pedidos.class);

            // Exibir os itens
            for (Pedido item : pedidos.getPedidos()) {
                System.out.println("Item: " + item);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


	@PostMapping("/teste")
	public ResponseEntity<?> receberNotificao(@RequestBody Pedidos pedidos) {
		// Log do objeto Pedidos
		System.out.println("Objeto Pedidos recebido: " + pedidos);

		// Verifique se a lista está vazia
		if (pedidos.getPedidos() == null || pedidos.getPedidos().isEmpty()) {
			System.out.println("A lista de pedidos está vazia.");
		}

		for (Pedido pedido : pedidos.getPedidos()) {
			String id = pedido.getReferenceId();
			int quantidade = pedido.getQuantity();
			String descricao = pedido.getName();

			// Exibe as informações no console
			System.out.println("Item Reference ID: " + id);
			System.out.println("Item Name: " + descricao);
			System.out.println("Item Quantity: " + quantidade);
		}

		return ResponseEntity.ok("Notificação processada com sucesso");
	}
}
